# cli lastt, train, by name
import numpy as np
from keras.datasets import mnist
from keras.utils import to_categorical
from neural_net import train_model, predict
import matplotlib.pyplot as plt

np.random.seed(5)


def normalize(img):
    """
    Normalize the numpy array so it's values change from 0 to 1, not from
    0 to 255
    
    Parameters
    ----------
    img : numpy array
        a data sample
    
    Returns
    ----------
    normalized data sample
    """
    return img/np.max(img)


(X_train, Y_train), (X_test, Y_test) = mnist.load_data()
X_test_norm = np.array([normalize(img) for img in X_test])
X_test_flat = X_test_norm.reshape((X_test.shape[0], X_test.shape[1] ** 2)).T


def countAccuracy(nnLables, trueLables):
    """
    Find the part of the test sample to which the model assigns correct labels
    
    Parameters
    ----------
    nnLables : numpy array
        lables generated by the model
        
    trueLables:
        correct lables
    
    Returns
    ----------
    Accuracy of the model, a number from 0 to 1
    """
    counter = 0
    l = len(trueLables)
    for i in range(l):
        if np.argmax(nnLables.T[i]) == trueLables[i]:
            counter += 1
    
    return counter/l


def train(trainSize):
    """
    train the model and save the trained params to file "last_saved_params.npy"
    print the accuracy
    
    Parameters
    ----------
    trainSize: number
        number of samples to be taken from data set for training
    """
    print("Train and test shapes:")    
    print(X_train.shape)
    print(X_test.shape)
    
    X_train_norm = np.array([normalize(img) for img in X_train[0:trainSize]])
    X_train_flat = X_train_norm.reshape((X_train_norm.shape[0], X_train_norm.shape[1] ** 2)).T
    
    Y_train_one_hot = to_categorical(Y_train[0:trainSize]).T

    """
    Hardcode the model params here
    """
    layers_dims = [X_train_flat.shape[0], 56, 28, 10]
    activations = ["relu", "relu", "sigmoid"]

    trained_params = train_model(X_train_flat,
                             Y_train_one_hot,
                             layers_dims,
                             activations,
                             learning_rate = 0.06,
                             num_iterations = 2000,
                             print_cost=True)
    
    np.save('last_saved_params.npy', trained_params)
    
    trainPredict = predict(X_train_flat, trained_params)
    testPredict = predict(X_test_flat, trained_params)
    
    trainAcc = countAccuracy(trainPredict, Y_train[0:trainSize])
    testAcc = countAccuracy(testPredict, Y_test)
    
    print("Accuracy on training set: ", str(trainAcc*100), "%")
    print("Accuracy on test set: ", str(testAcc*100), "%")
    
    
def use_pretrained(ind, params):
    """
    get prediction of a model for one sample from the test dataset

    Parameters
    ----------
    ind : number
        index of sample from the test dataset
        
    params : tuple
        params of a trauned model
    """
    plt.imshow(X_test[ind], cmap='gray')
    print("Correct: ", Y_test[ind])
    
    p = predict(np.array([X_test_flat.T[ind]]).T, params)
    print("NN output: ")
    print(p)
    print(np.argmax(p))


def main(mode,
         train_dataset_size = 60000,
         prediction_index = 0,
         params_file_name = "nice_params.npy"):
    """
    
    """
    if mode == 'use_last':
        params = np.load("last_saved_params.npy", allow_pickle=True).item()
        use_pretrained(prediction_index, params)
    elif mode == 'use_from_file':
        params = np.load(params_file_name, allow_pickle=True).item()
        use_pretrained(prediction_index, params)
    elif mode == 'train':
        train(train_dataset_size)
        

#main('train', 100)
#main('use_last', prediction_index = 10)
main('use_from_file', params_file_name = "nice_params.npy")